### Generated by rprotoc. DO NOT EDIT!
### <proto file: rdb_protocol/query_language.proto>
# message TableRef {
#     optional string db_name = 1;
#     required string table_name = 2;
# };
# 
# message VarTermTuple {
#     required string var = 1;
#     required Term term = 2;
# };
# 
# message Term {
#     enum TermType {
#         VAR = 0;
#         LET = 1;
#         CALL = 2;
#         IF = 3;
#         ERROR = 4;
#         NUMBER = 5;
#         STRING = 6;
#         JSON = 7;
#         BOOL = 8;
#         JSON_NULL = 9; //can't use just "NULL" here we get in trouble
#         ARRAY = 10;
#         OBJECT = 11;
#         GETBYKEY = 12;
#         TABLE = 13;
#         JAVASCRIPT = 14;
#     };
# 
#     required TermType type = 1;
# 
#     optional string var = 2;
# 
#     message Let {
#         repeated VarTermTuple binds = 1;
#         required Term expr = 2;
#     };
# 
#     optional Let let = 3;
# 
#     message Call {
#         required Builtin builtin = 1;
#         repeated Term args = 2;
#     };
# 
#     optional Call call = 4;
# 
#     message If {
#         required Term test = 1;
#         required Term true_branch = 2;
#         required Term false_branch = 3;
#     };
# 
#     optional If if_ = 5;
# 
#     optional string error = 6;
# 
#     optional double number = 7;
# 
#     optional string valuestring = 8;
# 
#     optional string jsonstring = 9;
# 
#     optional bool valuebool = 10;
# 
#     repeated Term array = 11;
# 
#     repeated VarTermTuple object = 12;
#     message GetByKey {
#         required TableRef table_ref = 1;
#         required string attrname = 2;
#         required Term key = 3;
#     };
# 
#     optional GetByKey get_by_key = 14;
# 
#     message Table {
#         required TableRef table_ref = 1;
#     };
# 
#     optional Table table = 15;
# 
#     optional string javascript = 16;
# 
#     // reserved for RethinkDB internal use.
#     extensions 1000 to 1099;
# };
# 
# message Builtin {
#     enum BuiltinType {
#         NOT = 1;
#         GETATTR = 2;
#         IMPLICIT_GETATTR = 3;
#         HASATTR = 4;
#         IMPLICIT_HASATTR = 5;
#         PICKATTRS = 6;
#         IMPLICIT_PICKATTRS = 7;
#         MAPMERGE = 8;
#         ARRAYAPPEND = 9;
#         ARRAYCONCAT = 10;
#         ARRAYSLICE = 11;
#         ARRAYNTH = 12;
#         ARRAYLENGTH = 13;
#         ADD = 14;
#         SUBTRACT = 15;
#         MULTIPLY = 16;
#         DIVIDE = 17;
#         MODULO = 18;
#         COMPARE = 19;
#         FILTER = 20;
#         MAP = 21;          // operates over streams
#         CONCATMAP = 22;
#         ORDERBY = 23;
#         DISTINCT = 24;
#         LIMIT = 25;
#         LENGTH = 26;
#         UNION = 27;
#         NTH = 28;
#         STREAMTOARRAY = 29;
#         ARRAYTOSTREAM = 30;
#         REDUCE = 31;
#         GROUPEDMAPREDUCE = 32;
#         ANY = 35;
#         ALL = 36;
#         RANGE = 37;
#         SKIP = 38;
#     };
# 
#     enum Comparison {
#         EQ = 1;
#         NE = 2;
#         LT = 3;
#         LE = 4;
#         GT = 5;
#         GE = 6;
#     };
# 
#     required BuiltinType type = 1;
# 
#     optional string attr = 2; //used if type is GETATTR of HASATTR
# 
#     repeated string attrs = 3; //used if type is PICKATTRS
# 
#     optional Comparison comparison = 4;
# 
#     message Filter {
#         required Predicate predicate = 1;
#     };
# 
#     optional Filter filter = 5;
# 
#     message Map {
#         required Mapping mapping = 1;
#     };
# 
#     optional Map map = 6;
# 
#     message ConcatMap {
#         required Mapping mapping = 1;
#     };
# 
#     optional ConcatMap concat_map = 7;
# 
#     message OrderBy {
#         required string attr = 1;
#         optional bool ascending = 2 [default = true];
#     };
# 
#     repeated OrderBy order_by = 8;
# 
#     optional Reduction reduce = 9;
# 
#     message GroupedMapReduce {
#         required Mapping group_mapping = 1;
#         required Mapping value_mapping = 2;
#         required Reduction reduction = 3;
#     };
# 
#     optional GroupedMapReduce grouped_map_reduce = 10;
# 
#     message Range {
#         required string attrname = 1;
#         optional Term lowerbound = 2;
#         optional Term upperbound = 3;
#     };
# 
#     optional Range range = 11;
# };
# 
# message Reduction {
#     required Term base = 1;
#     required string var1 = 2;
#     required string var2 = 3;
#     required Term body = 4;
# };
# 
# message Mapping {
#     required string arg = 1;
#     required Term body = 2;
# };
# 
# message Predicate {
#     required string arg = 1;
#     required Term body = 2;
# };
# 
# message ReadQuery {
#     required Term term = 1;
#     optional int64 max_chunk_size = 2; //may be 0 for unlimited
#     optional int64 max_age = 3;
# };
# 
# message WriteQuery {
#     enum WriteQueryType {
#         UPDATE = 1;
#         DELETE = 2;
#         MUTATE = 3;
#         INSERT = 4;
#         INSERTSTREAM = 5;
#         FOREACH = 6;
#         POINTUPDATE = 7;
#         POINTDELETE = 8;
#         POINTMUTATE = 9;
#     };
# 
#     required WriteQueryType type = 1;
# 
#     message Update {
#         required Term view = 1;
#         required Mapping mapping = 2;
#     };
# 
#     optional Update update = 2;
# 
#     message Delete {
#         required Term view = 1;
#     };
# 
#     optional Delete delete = 3;
# 
#     message Mutate {
#         required Term view = 1;
#         required Mapping mapping = 2;
#     };
# 
#     optional Mutate mutate = 4;
# 
#     message Insert {
#         required TableRef table_ref = 1;
#         repeated Term terms = 2;
#     };
# 
#     optional Insert insert = 5;
# 
#     message InsertStream {
#         required TableRef table_ref = 1;
#         required Term stream = 2;
#     };
# 
#     optional InsertStream insert_stream = 6;
# 
#     message ForEach {
#         required Term stream = 1;
#         required string var = 2;
#         repeated WriteQuery queries = 3;
#     };
# 
#     optional ForEach for_each = 7;
# 
#     message PointUpdate {
#         required TableRef table_ref = 1;
#         required string attrname = 2;
#         required Term key = 3;
#         required Mapping mapping = 4;
#     };
# 
#     optional PointUpdate point_update = 8;
# 
#     message PointDelete {
#         required TableRef table_ref = 1;
#         required string attrname = 2;
#         required Term key = 3;
#     };
# 
#     optional PointDelete point_delete = 9;
# 
#     message PointMutate {
#         required TableRef table_ref = 1;
#         required string attrname = 2;
#         required Term key = 3;
#         required Mapping mapping = 4;
#     };
# 
#     optional PointMutate point_mutate = 10;
# };
# 
# message Query {
#     enum QueryType {
#         READ = 1;
#         WRITE = 2;
#         CONTINUE = 3;
#         STOP = 4;
#     }
# 
#     required QueryType type = 1;
# 
#     required int64 token = 2;
# 
#     optional ReadQuery read_query = 3;
#     optional WriteQuery write_query = 4;
# }
# 
# message Response {
#     enum StatusCode {
#         SUCCESS_EMPTY = 0;
#         SUCCESS_JSON = 1;
#         SUCCESS_PARTIAL = 2; //need to send CONTINUE repeatedly until SUCCESS_STREAM
#         SUCCESS_STREAM = 3;
# 
#         BROKEN_CLIENT = -1; // Means the client is misbehaving, not the user
#         BAD_QUERY = -2;
#         RUNTIME_ERROR = -3;
#     }
#     required StatusCode status_code = 1;
# 
#     required int64 token = 2;
# 
#     repeated string response = 3;
# 
#     optional string error_message = 4;
# 
#     message Backtrace {
#         repeated string frame = 1;
#     };
# 
#     optional Backtrace backtrace = 5;
# }

require 'protobuf/message/message'
require 'protobuf/message/enum'
require 'protobuf/message/service'
require 'protobuf/message/extend'

class TableRef < ::Protobuf::Message
  defined_in __FILE__
  optional :string, :db_name, 1
  required :string, :table_name, 2
end
class VarTermTuple < ::Protobuf::Message
  defined_in __FILE__
  required :string, :var, 1
  required :Term, :term, 2
end
class Term < ::Protobuf::Message
  defined_in __FILE__
  class TermType < ::Protobuf::Enum
    defined_in __FILE__
    VAR = value(:VAR, 0)
    LET = value(:LET, 1)
    CALL = value(:CALL, 2)
    IF = value(:IF, 3)
    ERROR = value(:ERROR, 4)
    NUMBER = value(:NUMBER, 5)
    STRING = value(:STRING, 6)
    JSON = value(:JSON, 7)
    BOOL = value(:BOOL, 8)
    JSON_NULL = value(:JSON_NULL, 9)
    ARRAY = value(:ARRAY, 10)
    OBJECT = value(:OBJECT, 11)
    GETBYKEY = value(:GETBYKEY, 12)
    TABLE = value(:TABLE, 13)
    JAVASCRIPT = value(:JAVASCRIPT, 14)
  end
  required :TermType, :type, 1
  optional :string, :var, 2
  class Let < ::Protobuf::Message
    defined_in __FILE__
    repeated :VarTermTuple, :binds, 1
    required :Term, :expr, 2
  end
  optional :Let, :let, 3
  class Call < ::Protobuf::Message
    defined_in __FILE__
    required :Builtin, :builtin, 1
    repeated :Term, :args, 2
  end
  optional :Call, :call, 4
  class If < ::Protobuf::Message
    defined_in __FILE__
    required :Term, :test, 1
    required :Term, :true_branch, 2
    required :Term, :false_branch, 3
  end
  optional :If, :if_, 5
  optional :string, :error, 6
  optional :double, :number, 7
  optional :string, :valuestring, 8
  optional :string, :jsonstring, 9
  optional :bool, :valuebool, 10
  repeated :Term, :array, 11
  repeated :VarTermTuple, :object, 12
  class GetByKey < ::Protobuf::Message
    defined_in __FILE__
    required :TableRef, :table_ref, 1
    required :string, :attrname, 2
    required :Term, :key, 3
  end
  optional :GetByKey, :get_by_key, 14
  class Table < ::Protobuf::Message
    defined_in __FILE__
    required :TableRef, :table_ref, 1
  end
  optional :Table, :table, 15
  optional :string, :javascript, 16
  extensions 1000..1099
end
class Builtin < ::Protobuf::Message
  defined_in __FILE__
  class BuiltinType < ::Protobuf::Enum
    defined_in __FILE__
    NOT = value(:NOT, 1)
    GETATTR = value(:GETATTR, 2)
    IMPLICIT_GETATTR = value(:IMPLICIT_GETATTR, 3)
    HASATTR = value(:HASATTR, 4)
    IMPLICIT_HASATTR = value(:IMPLICIT_HASATTR, 5)
    PICKATTRS = value(:PICKATTRS, 6)
    IMPLICIT_PICKATTRS = value(:IMPLICIT_PICKATTRS, 7)
    MAPMERGE = value(:MAPMERGE, 8)
    ARRAYAPPEND = value(:ARRAYAPPEND, 9)
    ARRAYCONCAT = value(:ARRAYCONCAT, 10)
    ARRAYSLICE = value(:ARRAYSLICE, 11)
    ARRAYNTH = value(:ARRAYNTH, 12)
    ARRAYLENGTH = value(:ARRAYLENGTH, 13)
    ADD = value(:ADD, 14)
    SUBTRACT = value(:SUBTRACT, 15)
    MULTIPLY = value(:MULTIPLY, 16)
    DIVIDE = value(:DIVIDE, 17)
    MODULO = value(:MODULO, 18)
    COMPARE = value(:COMPARE, 19)
    FILTER = value(:FILTER, 20)
    MAP = value(:MAP, 21)
    CONCATMAP = value(:CONCATMAP, 22)
    ORDERBY = value(:ORDERBY, 23)
    DISTINCT = value(:DISTINCT, 24)
    LIMIT = value(:LIMIT, 25)
    LENGTH = value(:LENGTH, 26)
    UNION = value(:UNION, 27)
    NTH = value(:NTH, 28)
    STREAMTOARRAY = value(:STREAMTOARRAY, 29)
    ARRAYTOSTREAM = value(:ARRAYTOSTREAM, 30)
    REDUCE = value(:REDUCE, 31)
    GROUPEDMAPREDUCE = value(:GROUPEDMAPREDUCE, 32)
    ANY = value(:ANY, 35)
    ALL = value(:ALL, 36)
    RANGE = value(:RANGE, 37)
    SKIP = value(:SKIP, 38)
  end
  class Comparison < ::Protobuf::Enum
    defined_in __FILE__
    EQ = value(:EQ, 1)
    NE = value(:NE, 2)
    LT = value(:LT, 3)
    LE = value(:LE, 4)
    GT = value(:GT, 5)
    GE = value(:GE, 6)
  end
  required :BuiltinType, :type, 1
  optional :string, :attr, 2
  repeated :string, :attrs, 3
  optional :Comparison, :comparison, 4
  class Filter < ::Protobuf::Message
    defined_in __FILE__
    required :Predicate, :predicate, 1
  end
  optional :Filter, :filter, 5
  class Map < ::Protobuf::Message
    defined_in __FILE__
    required :Mapping, :mapping, 1
  end
  optional :Map, :map, 6
  class ConcatMap < ::Protobuf::Message
    defined_in __FILE__
    required :Mapping, :mapping, 1
  end
  optional :ConcatMap, :concat_map, 7
  class OrderBy < ::Protobuf::Message
    defined_in __FILE__
    required :string, :attr, 1
    optional :bool, :ascending, 2, :default => true
  end
  repeated :OrderBy, :order_by, 8
  optional :Reduction, :reduce, 9
  class GroupedMapReduce < ::Protobuf::Message
    defined_in __FILE__
    required :Mapping, :group_mapping, 1
    required :Mapping, :value_mapping, 2
    required :Reduction, :reduction, 3
  end
  optional :GroupedMapReduce, :grouped_map_reduce, 10
  class Range < ::Protobuf::Message
    defined_in __FILE__
    required :string, :attrname, 1
    optional :Term, :lowerbound, 2
    optional :Term, :upperbound, 3
  end
  optional :Range, :range, 11
end
class Reduction < ::Protobuf::Message
  defined_in __FILE__
  required :Term, :base, 1
  required :string, :var1, 2
  required :string, :var2, 3
  required :Term, :body, 4
end
class Mapping < ::Protobuf::Message
  defined_in __FILE__
  required :string, :arg, 1
  required :Term, :body, 2
end
class Predicate < ::Protobuf::Message
  defined_in __FILE__
  required :string, :arg, 1
  required :Term, :body, 2
end
class ReadQuery < ::Protobuf::Message
  defined_in __FILE__
  required :Term, :term, 1
  optional :int64, :max_chunk_size, 2
  optional :int64, :max_age, 3
end
class WriteQuery < ::Protobuf::Message
  defined_in __FILE__
  class WriteQueryType < ::Protobuf::Enum
    defined_in __FILE__
    UPDATE = value(:UPDATE, 1)
    DELETE = value(:DELETE, 2)
    MUTATE = value(:MUTATE, 3)
    INSERT = value(:INSERT, 4)
    INSERTSTREAM = value(:INSERTSTREAM, 5)
    FOREACH = value(:FOREACH, 6)
    POINTUPDATE = value(:POINTUPDATE, 7)
    POINTDELETE = value(:POINTDELETE, 8)
    POINTMUTATE = value(:POINTMUTATE, 9)
  end
  required :WriteQueryType, :type, 1
  class Update < ::Protobuf::Message
    defined_in __FILE__
    required :Term, :view, 1
    required :Mapping, :mapping, 2
  end
  optional :Update, :update, 2
  class Delete < ::Protobuf::Message
    defined_in __FILE__
    required :Term, :view, 1
  end
  optional :Delete, :delete, 3
  class Mutate < ::Protobuf::Message
    defined_in __FILE__
    required :Term, :view, 1
    required :Mapping, :mapping, 2
  end
  optional :Mutate, :mutate, 4
  class Insert < ::Protobuf::Message
    defined_in __FILE__
    required :TableRef, :table_ref, 1
    repeated :Term, :terms, 2
  end
  optional :Insert, :insert, 5
  class InsertStream < ::Protobuf::Message
    defined_in __FILE__
    required :TableRef, :table_ref, 1
    required :Term, :stream, 2
  end
  optional :InsertStream, :insert_stream, 6
  class ForEach < ::Protobuf::Message
    defined_in __FILE__
    required :Term, :stream, 1
    required :string, :var, 2
    repeated :WriteQuery, :queries, 3
  end
  optional :ForEach, :for_each, 7
  class PointUpdate < ::Protobuf::Message
    defined_in __FILE__
    required :TableRef, :table_ref, 1
    required :string, :attrname, 2
    required :Term, :key, 3
    required :Mapping, :mapping, 4
  end
  optional :PointUpdate, :point_update, 8
  class PointDelete < ::Protobuf::Message
    defined_in __FILE__
    required :TableRef, :table_ref, 1
    required :string, :attrname, 2
    required :Term, :key, 3
  end
  optional :PointDelete, :point_delete, 9
  class PointMutate < ::Protobuf::Message
    defined_in __FILE__
    required :TableRef, :table_ref, 1
    required :string, :attrname, 2
    required :Term, :key, 3
    required :Mapping, :mapping, 4
  end
  optional :PointMutate, :point_mutate, 10
end
class Query < ::Protobuf::Message
  defined_in __FILE__
  class QueryType < ::Protobuf::Enum
    defined_in __FILE__
    READ = value(:READ, 1)
    WRITE = value(:WRITE, 2)
    CONTINUE = value(:CONTINUE, 3)
    STOP = value(:STOP, 4)
  end
  required :QueryType, :type, 1
  required :int64, :token, 2
  optional :ReadQuery, :read_query, 3
  optional :WriteQuery, :write_query, 4
end
class Response < ::Protobuf::Message
  defined_in __FILE__
  class StatusCode < ::Protobuf::Enum
    defined_in __FILE__
    SUCCESS_EMPTY = value(:SUCCESS_EMPTY, 0)
    SUCCESS_JSON = value(:SUCCESS_JSON, 1)
    SUCCESS_PARTIAL = value(:SUCCESS_PARTIAL, 2)
    SUCCESS_STREAM = value(:SUCCESS_STREAM, 3)
    BROKEN_CLIENT = value(:BROKEN_CLIENT, -1)
    BAD_QUERY = value(:BAD_QUERY, -2)
    RUNTIME_ERROR = value(:RUNTIME_ERROR, -3)
  end
  required :StatusCode, :status_code, 1
  required :int64, :token, 2
  repeated :string, :response, 3
  optional :string, :error_message, 4
  class Backtrace < ::Protobuf::Message
    defined_in __FILE__
    repeated :string, :frame, 1
  end
  optional :Backtrace, :backtrace, 5
end
